<?php

namespace DoctrineORMModule\Proxy\__CG__\SourceCode\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Language extends \SourceCode\Entity\Language implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }



    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

        return parent::__set($name, $value);
    }



    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'id', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'name', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'initialCodeStructure', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'endCodeStructure', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'initialVertexName', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'endVertexName', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'ifThenNameVertex', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'diversionCommands', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'logicalConnectives', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'dataTypes', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'specialCharacters'];
        }

        return ['__isInitialized__', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'id', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'name', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'initialCodeStructure', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'endCodeStructure', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'initialVertexName', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'endVertexName', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'ifThenNameVertex', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'diversionCommands', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'logicalConnectives', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'dataTypes', '' . "\0" . 'SourceCode\\Entity\\Language' . "\0" . 'specialCharacters'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Language $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getInitialCodeStructure()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInitialCodeStructure', []);

        return parent::getInitialCodeStructure();
    }

    /**
     * {@inheritDoc}
     */
    public function setInitialCodeStructure($initialCodeStructure)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInitialCodeStructure', [$initialCodeStructure]);

        return parent::setInitialCodeStructure($initialCodeStructure);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndCodeStructure()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndCodeStructure', []);

        return parent::getEndCodeStructure();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndCodeStructure($endCodeStructure)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndCodeStructure', [$endCodeStructure]);

        return parent::setEndCodeStructure($endCodeStructure);
    }

    /**
     * {@inheritDoc}
     */
    public function getInitialVertexName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInitialVertexName', []);

        return parent::getInitialVertexName();
    }

    /**
     * {@inheritDoc}
     */
    public function setInitialVertexName($initialVertexName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInitialVertexName', [$initialVertexName]);

        return parent::setInitialVertexName($initialVertexName);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndVertexName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndVertexName', []);

        return parent::getEndVertexName();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndVertexName($endVertexName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndVertexName', [$endVertexName]);

        return parent::setEndVertexName($endVertexName);
    }

    /**
     * {@inheritDoc}
     */
    public function getIfThenNameVertex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIfThenNameVertex', []);

        return parent::getIfThenNameVertex();
    }

    /**
     * {@inheritDoc}
     */
    public function setIfThenNameVertex($ifThenNameVertex)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIfThenNameVertex', [$ifThenNameVertex]);

        return parent::setIfThenNameVertex($ifThenNameVertex);
    }

    /**
     * {@inheritDoc}
     */
    public function getDiversionCommands()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiversionCommands', []);

        return parent::getDiversionCommands();
    }

    /**
     * {@inheritDoc}
     */
    public function setDiversionCommands($diversionCommands)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDiversionCommands', [$diversionCommands]);

        return parent::setDiversionCommands($diversionCommands);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogicalConnectives()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogicalConnectives', []);

        return parent::getLogicalConnectives();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogicalConnectives($logicalConnectives)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogicalConnectives', [$logicalConnectives]);

        return parent::setLogicalConnectives($logicalConnectives);
    }

    /**
     * {@inheritDoc}
     */
    public function getDataTypes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDataTypes', []);

        return parent::getDataTypes();
    }

    /**
     * {@inheritDoc}
     */
    public function setDataTypes($dataTypes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDataTypes', [$dataTypes]);

        return parent::setDataTypes($dataTypes);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpecialCharacters()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpecialCharacters', []);

        return parent::getSpecialCharacters();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpecialCharacters($specialCharacters)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpecialCharacters', [$specialCharacters]);

        return parent::setSpecialCharacters($specialCharacters);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function setData($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setData', [$data]);

        return parent::setData($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getData(\Doctrine\ORM\EntityManager $em)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', [$em]);

        return parent::getData($em);
    }

}
